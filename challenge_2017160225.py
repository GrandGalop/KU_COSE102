# -*- coding: utf-8 -*-
"""challenge_2017160225.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-kCQjJ3bdE8ypFm4fVuDvWYchbChLkpE
"""

import matplotlib.pyplot as plt

def manhattandistance(agent, pos): # 두 좌표 사이의 manhattandistance를 return하는 함수.
  return abs(agent[0]-pos[0])+abs(agent[1]-pos[1])

def euclideandistance(agent, pos): # 두 좌표 사이의 euclideandistance를 return하는 함수.
  return ((agent[0]-pos[0])**2+(agent[1]-pos[1])**2)**(1/2)

'''
ingrass
코코가 잔디밭 안에 있는지를 확인하는 함수.
코코와 잔디밭 중심의 거리 사이를 manhattandistance 함수로 구해준 후,
그것이 grass의 크기(반 대각선)보다 작을 경우 안에 있다고 판단, True return.
'''
def isingrass(agent, grasses):
  for grass in grasses:
    if manhattandistance(agent, [grass[0], grass[1]])<=grass[2]:
      return True
  return False

'''
inpond
코코가 연못 안에 있는지를 확인하는 함수.
코코와 연못 중심의 거리 사이를 euclideandistance 함수로 구해준 후,
그것이 pond의 radius보다 작을 경우 안에 있다고 판단, True return.
'''
def isinpond(agent, ponds):
  for pond in ponds:
    if euclideandistance(agent, [pond[0], pond[1]])<=pond[2]: #
      return True
  return False

'''
plotstate
프로그램 시작과 방향키를 입력할 때마다 grass, pond, agent(=코코)의 위치를
matplot 위에 표현하여 출력시켜주는 함수.
ponds와 grasses는 각 pond와 grass의 좌표, 크기의 list를 요소로 갖는 2중 list임.
'''
def plotstate(ponds, grasses, agent):
  plt.figure(figsize=(10, 10))
  plt.style.use('ggplot')
  plt.xlim(0, 20)
  plt.ylim(0, 20)
  plt.xticks(range(0, 21))
  plt.yticks(range(0, 21))
  for pond in ponds:
    plt.scatter(pond[0], pond[1],s=3000*pond[2]**2, color="r", marker='o', alpha=0.2) 
    # pond[0]=pond의 x좌표, pond[1]=pond의 y좌표, pond[2]=pond의 크기.
    # marker 크기 s를 3000*pond[2]**2로 잡은 것은 최대한 pond 크기와 실제 크기를 맞춘 것임.
  for grass in grasses:
    plt.scatter(grass[0], grass[1],s=1500*grass[2]**2, color="b", marker='D', alpha=0.2)
    # grass[0]=grass의 x좌표, grass[1]=grass의 y좌표, grass[2]=grass의 크기.
  plt.scatter(agent[0], agent[1], s=1000, color='g', marker='*')
  plt.show()

agent = [0, 0] # 코코의 위치
ponds = [[2, 2, 1], [8, 3, 2], [5, 5, 2], [7, 7, 1], [12, 12, 2]] # pond의 중심 좌표와 radius의 list. [x좌표, y좌표, radius]
grasses = [[2, 6, 1], [5, 15, 3], [8, 12, 2], [14, 6, 1], [17, 3, 2]] # grass의 중심 좌표와 크기(반 대각선) list. [x좌표, y좌표, 크기]

plotstate(ponds, grasses, agent)

directions = ['w', 'W', 'a', 'A', 's', 'S', 'd', 'D']
numpond = 0 # 웅덩이를 밟은 횟수. 3이 되는 순간 loop 종료
numgrass = 0 # 잔디를 밟은 횟수. loop가 끝나고 코코의 기분을 표현할 때 사용.

while numpond<3 and -1<agent[0]<21 and -1<agent[1]<21: # 3번째 밟거나, 코코가 밖으로 나갈 경우 루프 종료.
  command = input() # input을 받아 command로 저장.
  if not command in directions: # 사전에 지정한 directions list에 없는 입력의 경우 다시 루프 처음으로 돌아감.
    continue
  elif command == 'w' or command == 'W':
    agent[1]+=1
    plotstate(ponds, grasses, agent)
    if isingrass(agent, grasses)==True:
      numgrass+=1
      print("코코가 매우 기뻐합니다!")
    if isinpond(agent, ponds)==True:
      numpond+=1
      print("코코가 기분이 좋지 않아 보입니다.")
  elif command == 'a' or command == 'A':
    agent[0]-=1
    plotstate(ponds, grasses, agent)
    if isingrass(agent, grasses)==True:
      numgrass+=1
      print("코코가 매우 기뻐합니다!")
    if isinpond(agent, ponds)==True:
      numpond+=1
      print("코코가 기분이 좋지 않아 보입니다.")
  elif command == 's' or command == 'S':
    agent[1]-=1
    plotstate(ponds, grasses, agent)
    if isingrass(agent, grasses)==True:
      numgrass+=1
      print("코코가 매우 기뻐합니다!")
    if isinpond(agent, ponds)==True:
      numpond+=1
      print("코코가 기분이 좋지 않아 보입니다.")
  else:
    agent[0]+=1
    plotstate(ponds, grasses, agent)
    if isingrass(agent, grasses)==True:
      numgrass+=1
      print("코코가 매우 기뻐합니다!")
    if isinpond(agent, ponds)==True:
      numpond+=1
      print("코코가 기분이 좋지 않아 보입니다.")
print("산책 끝")
print("코코의 기분이 {0} 좋아졌습니다!".format(10*numgrass))

